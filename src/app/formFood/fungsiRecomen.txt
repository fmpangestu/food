const recommendFoods = (calorieNeeds: number) => {
  const calculateMealCalories = (totalCalories: number) => {
    const breakfastCalories = Math.round(totalCalories * 0.25);
    const lunchCalories = Math.round(totalCalories * 0.5);
    const dinnerCalories = Math.round(totalCalories * 0.25);
    return { breakfastCalories, lunchCalories, dinnerCalories };
  };

  const { breakfastCalories, lunchCalories, dinnerCalories } =
    calculateMealCalories(calorieNeeds);

  // Clear used foods when generating full recommendations
  usedFoodNames.clear();

  // Reset all tracking states for fresh recommendations
  setMenuChangeCount({
    breakfast: 0,
    lunch: 0,
    dinner: 0,
  });
  
  allExcludedFoods.current = {
    breakfast: new Set(),
    lunch: new Set(),
    dinner: new Set(),
  };

  // Reset excluded combinations
  setExcludedCombinations({
    breakfast: new Set(),
    lunch: new Set(),
    dinner: new Set(),
  });

  // Get multiple recommendations for each meal
  const breakfast = getMultipleRecommendations(
    breakfastCalories,
    "breakfast"
  );
  const lunch = getMultipleRecommendations(lunchCalories, "lunch");
  const dinner = getMultipleRecommendations(dinnerCalories, "dinner");

  setRecommendedFoods({
    breakfast,
    lunch,
    dinner,
  });

  setBreakfastCalories(breakfastCalories);
  setLunchCalories(lunchCalories);
  setDinnerCalories(dinnerCalories);
};








  // const getNewMealRecommendations = (
  //   mealType: "breakfast" | "lunch" | "dinner"
  // ) => {
  //   // Add current recommendations to excluded foods for this meal
  //   const currentFoods = recommendedFoods[mealType];

  //   if (currentFoods && currentFoods.length > 0) {
  //     // Create a signature for this combination of foods
  //     const foodSignature = currentFoods
  //       .map((food) => food.name)
  //       .sort()
  //       .join("|");

  //     setExcludedCombinations((prev) => {
  //       const newExcluded = new Set(prev[mealType]);
  //       newExcluded.add(foodSignature);
  //       return {
  //         ...prev,
  //         [mealType]: newExcluded,
  //       };
  //     });

  //     // Remove these foods from used foods
  //     currentFoods.forEach((food) => {
  //       usedFoodNames.delete(food.name);
  //     });
  //   }

  //   const excludedFoodsSet = new Set<string>();
  //   // Get target calories for this meal
  //   let targetCalories;
  //   if (mealType === "breakfast") targetCalories = breakfastCalories || 0;
  //   else if (mealType === "lunch") targetCalories = lunchCalories || 0;
  //   else targetCalories = dinnerCalories || 0;

  //   // Get new recommendations for this meal
  //   // const excludedFoods = new Set<string>();
  //   // currentFoods.forEach(food => excludedFoods.add(food.name));

  //   const newRecommendations = getMultipleRecommendations(
  //     targetCalories,
  //     mealType,
  //     excludedFoodsSet
  //   );

  //   // Update recommendations state for just this meal
  //   setRecommendedFoods((prev) => ({
  //     ...prev,
  //     [mealType]: newRecommendations,
  //   }));
  // };















    // const getMultipleRecommendations = (
  //   targetCalories: number,
  //   mealType: "breakfast" | "lunch" | "dinner",
  //   excludedFoods: Set<string> = new Set(),
  //   count: number = 3
  // ): Food[] => {
  //   // Set calorie constraints based on meal type for individual foods
  //   const perFoodTarget = targetCalories / count;

  //   let minCaloriesPerFood, maxCaloriesPerFood;
  //   if (mealType === "breakfast") {
  //     minCaloriesPerFood = perFoodTarget * 0.5; // More flexible for individual items
  //     maxCaloriesPerFood = perFoodTarget * 1.5;
  //   } else if (mealType === "dinner") {
  //     minCaloriesPerFood = perFoodTarget * 0.6;
  //     maxCaloriesPerFood = perFoodTarget * 1.4;
  //   } else {
  //     minCaloriesPerFood = perFoodTarget * 0.7;
  //     maxCaloriesPerFood = perFoodTarget * 1.3;
  //   }

  //   console.log(
  //     `${mealType} total target: ${targetCalories}, per item: ${perFoodTarget}`
  //   );

  //   // Filter foods by calorie range and exclude already used foods
  //   let availableFoods = foods.filter(
  //     (food) =>
  //       food.calories >= minCaloriesPerFood &&
  //       food.calories <= maxCaloriesPerFood &&
  //       !usedFoodNames.has(food.name) &&
  //       !excludedFoods.has(food.name)
  //   );

  //   // If not enough foods in range, expand range
  //   if (availableFoods.length < count * 2) {
  //     console.log(`Not enough foods in range for ${mealType}, expanding range`);
  //     availableFoods = foods.filter(
  //       (food) => !usedFoodNames.has(food.name) && !excludedFoods.has(food.name)
  //     );
  //   }

  //   // If still not enough foods, allow previously excluded foods
  //   if (availableFoods.length < count) {
  //     console.log(`Not enough foods for ${mealType}, allowing excluded foods`);
  //     availableFoods = foods.filter((food) => !usedFoodNames.has(food.name));
  //   }

  //   // Create target "profile" for similarity calculation
  //   const targetProfile = {
  //     calories: perFoodTarget, // Target per item
  //     protein: dailyProteinNeeds
  //       ? (dailyProteinNeeds * (mealType === "lunch" ? 0.5 : 0.25)) / count
  //       : 0,
  //     carbs: dailyCarbsNeeds
  //       ? (dailyCarbsNeeds * (mealType === "lunch" ? 0.5 : 0.25)) / count
  //       : 0,
  //     fat: (targetCalories * 0.3) / 9 / count,
  //   };

  //   // Calculate similarity scores
  //   const foodsWithScores = availableFoods.map((food) => {
  //     const foodVector = [food.calories, food.protein, food.carbs, food.fat];
  //     const targetVector = [
  //       targetProfile.calories,
  //       targetProfile.protein,
  //       targetProfile.carbs,
  //       targetProfile.fat,
  //     ];

  //     // Calculate similarity with specific focus on calories matching
  //     let calorieMatch =
  //       1 - Math.abs(food.calories - perFoodTarget) / perFoodTarget;

  //     // Add penalty for exceeding target calories, especially for breakfast
  //     if (food.calories > perFoodTarget) {
  //       const overagePercent = (food.calories - perFoodTarget) / perFoodTarget;

  //       // Breakfast should have heavier penalty for being over
  //       if (mealType === "breakfast") {
  //         calorieMatch -= overagePercent * 0.5; // Higher penalty for breakfast
  //       } else {
  //         calorieMatch -= overagePercent * 0.3; // Normal penalty for lunch/dinner
  //       }
  //     }

  //     const similarityScore =
  //       cosineSimilarity(foodVector, targetVector) * (0.7 + 0.3 * calorieMatch);

  //     return { ...food, similarityScore };
  //   });

  //   // Sort by similarity score
  //   const sortedFoods = foodsWithScores.sort(
  //     (a, b) => (b.similarityScore || 0) - (a.similarityScore || 0)
  //   );

  //   // Get the top 'count' recommendations
  //   // const selectedFoods: Food[] = [];
  //   // for (let i = 0; i < sortedFoods.length && selectedFoods.length < count; i++) {
  //   //   const food = sortedFoods[i];
  //   //   // Only add if not already in the set
  //   //   if (!usedFoodNames.has(food.name)) {
  //   //     selectedFoods.push(food);
  //   //     usedFoodNames.add(food.name);
  //   //   }
  //   // }

  //   const selectedFoods: Food[] = [];
  //   let attempts = 0;
  //   const maxAttempts = 5; // Avoid infinite loops

  //   while (selectedFoods.length < count && attempts < maxAttempts) {
  //     attempts++;

  //     // Clear previous selection attempt
  //     selectedFoods.length = 0;
  //     const tempUsedNames = new Set<string>();

  //     for (
  //       let i = 0;
  //       i < sortedFoods.length && selectedFoods.length < count;
  //       i++
  //     ) {
  //       const food = sortedFoods[i];
  //       // Only add if not already in the temporary set
  //       if (
  //         !tempUsedNames.has(food.name) &&
  //         !usedFoodNames.has(food.name) &&
  //         !excludedFoods.has(food.name)
  //       ) {
  //         selectedFoods.push(food);
  //         tempUsedNames.add(food.name);
  //       }
  //     }

  //     // Check if this combination is in excluded combinations
  //     if (selectedFoods.length === count) {
  //       const foodSignature = selectedFoods
  //         .map((food) => food.name)
  //         .sort()
  //         .join("|");
  //       if (excludedCombinations[mealType].has(foodSignature)) {
  //         console.log(`Skipping already seen combination for ${mealType}`);
  //         // Try again with the top items excluded
  //         selectedFoods.forEach((food) => excludedFoods.add(food.name));
  //         continue;
  //       }

  //       // Valid new combination - add to used foods
  //       selectedFoods.forEach((food) => usedFoodNames.add(food.name));
  //       break;
  //     }
  //   }

  //   return selectedFoods;
  // };