"use client";
import { useEffect, useState, useRef } from "react";
import { readCSV } from "../../lib/csvReader";
import cosineSimilarity from "../../lib/cosineSimilarity";

// import jsPDF from "jspdf";
import html2canvas from "html2canvas";
// Tipe untuk data form
interface FormData {
  weight: string;
  height: string;
  age: string;
  gender: string;
  activityLevel: string;
}

// Tipe untuk hasil makanan
interface Food {
  name: string;
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  sodium: number;
  porpotionSize: number;
  similarityScore?: number;
}

const FoodRecommendation = () => {
  const [formData, setFormData] = useState<FormData>({
    weight: "",
    height: "",
    age: "",
    gender: "male",
    activityLevel: "sedentary", // Default to sedentary
  });
  const [foods, setFoods] = useState<Food[]>([]);

  // Update state to store arrays of foods per meal
  const [recommendedFoods, setRecommendedFoods] = useState<{
    breakfast: Food[];
    lunch: Food[];
    dinner: Food[];
  }>({ breakfast: [], lunch: [], dinner: [] });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [idealWeight, setIdealWeight] = useState<string | null>(null);
  const [calorieNeeds, setCalorieNeeds] = useState<number | null>(null);
  const [dailySugarNeeds, setDailySugarNeeds] = useState<number | null>(null);
  const [dailySodiumNeeds, setDailySodiumNeeds] = useState<number | null>(null);
  const [dailyProteinNeeds, setDailyProteinNeeds] = useState<number | null>(
    null
  );
  const [dailyCarbsNeeds, setDailyCarbsNeeds] = useState<number | null>(null);
  const [saturedFatLimit, setSaturedFatLimit] = useState<number | null>(null);
  const [breakfastCalories, setBreakfastCalories] = useState<number | null>(
    null
  );
  const [lunchCalories, setLunchCalories] = useState<number | null>(null);
  const [dinnerCalories, setDinnerCalories] = useState<number | null>(null);
  const [menuChangeCount, setMenuChangeCount] = useState<{
    breakfast: number;
    lunch: number;
    dinner: number;
  }>({
    breakfast: 0,
    lunch: 0,
    dinner: 0,
  });

  const allExcludedFoods = useRef<{
    [key: string]: Set<string>;
  }>({
    breakfast: new Set(),
    lunch: new Set(),
    dinner: new Set(),
  });
  // Update to track excluded food combinations
  const [excludedCombinations, setExcludedCombinations] = useState<{
    breakfast: Set<string>;
    lunch: Set<string>;
    dinner: Set<string>;
  }>({
    breakfast: new Set(),
    lunch: new Set(),
    dinner: new Set(),
  });

  useEffect(() => {
    const fetchFoods = async () => {
      try {
        const rawData = await readCSV("/foods.csv");

        // Type check and transform the data if needed
        if (Array.isArray(rawData)) {
          // Map the data to ensure correct property names
          const typedData: Food[] = rawData.map((item) => ({
            name: item.name,
            calories: Number(item.calories),
            protein: Number(item.protein),
            fat: Number(item.fat),
            carbs: Number(item.carbs),
            sodium: Number(item.sodium),
            porpotionSize: Number(
              item.porpotionSize || item.porpotionSize || 100
            ), // Handle both spellings
            similarityScore: undefined,
          }));

          if (!typedData || typedData.length === 0) {
            console.error("No foods loaded or empty data array");
          } else {
            console.log("Loaded foods sample:", typedData.slice(0, 3));
          }

          setFoods(typedData);
        } else {
          console.error("Invalid data format returned from readCSV");
        }
      } catch (error) {
        console.error("Error loading food data:", error);
      }
    };

    fetchFoods();
  }, []);
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const validateForm = (): boolean => {
    const { weight, height, age } = formData;
    if (
      !weight ||
      !height ||
      !age ||
      Number(weight) <= 0 ||
      Number(height) <= 0 ||
      Number(age) <= 0
    ) {
      setError("Semua input harus diisi dengan nilai yang valid.");
      setSuccess(null);
      return false;
    }
    setError(null);
    return true;
  };

  const calculateIdealWeight = (height: number) => {
    // Menggunakan standar IMT Asia Pasifik yang umum (Normal: 18.5 - 22.9)
    // Namun, untuk rentang berat ideal, seringkali digunakan batas 18.5 - 24.9 agar lebih fleksibel
    const minBMI = 18.5;
    const maxBMI = 24.9; // Batas atas overweight sebelum obesitas I
    const heightInMeters = height / 100;
    const minWeight = minBMI * heightInMeters * heightInMeters;
    const maxWeight = maxBMI * heightInMeters * heightInMeters;
    return `${Math.round(minWeight)} - ${Math.round(maxWeight)} kg`;
  };

  // Definisikan Faktor Aktivitas Fisik (FA) berdasarkan sumber buku dan jenis kelamin
  // Kunci objek (sedentary, light, moderate, active) akan sesuai dengan value dari dropdown form
  const activityFactors: {
    [key: string]: { male: number; female: number };
  } = {
    sedentary: { male: 1.2, female: 1.2 }, // Dari buku: "Istirahat ditempat tidur"
    light: { male: 1.5, female: 1.5 },     // Dari buku: "Ringan"
    moderate: { male: 1.8, female: 1.7 }, // Dari buku: "Sedang"
    active: { male: 2.1, female: 1.8 },    // Dari buku: "Berat"
  };

  const calculateCalorieNeeds = (
    weight: number,
    height: number,
    age: number,
    gender: string,
    activityLevelKey: string // Ini adalah key seperti "sedentary", "light", dll.
  ): number => {
    let bmr: number;
    // Rumus Mifflin-St Jeor untuk BMR
    if (gender === "male") {
      bmr = 10 * weight + 6.25 * height - 5 * age + 5;
    } else {
      bmr = 10 * weight + 6.25 * height - 5 * age - 161;
    }

    // Dapatkan objek faktor untuk level aktivitas yang dipilih
    const selectedLevelFactors = activityFactors[activityLevelKey];

    let factor: number;
    if (selectedLevelFactors) {
      // Pilih faktor berdasarkan jenis kelamin
      factor = gender === "male" ? selectedLevelFactors.male : selectedLevelFactors.female;
    } else {
      // Fallback jika activityLevelKey tidak dikenal (seharusnya tidak terjadi jika form valid)
      // Default ke sedentary
      factor = gender === "male" ? activityFactors.sedentary.male : activityFactors.sedentary.female;
      console.warn(`Unknown activity level: ${activityLevelKey}, defaulting to sedentary.`);
    }

    return Math.round(bmr * factor);
  };

  const calculateDailyNutrientNeeds = (
    calories: number,
    weight: number,
    age: number,
    gender: string
  ) => {
    // Kebutuhan protein bisa bervariasi, 0.8g/kgBB adalah rekomendasi umum untuk dewasa
    const proteinNeeds = Math.round(weight * 0.8); // Gram
    // Rekomendasi asupan gula harian tidak lebih dari 10% total kalori, atau maks 50g (WHO)
    const sugarNeeds = Math.round(Math.min((calories * 0.1) / 4, 50)); // Gram
    setDailySugarNeeds(sugarNeeds);

    // Kebutuhan sodium berdasarkan usia (contoh dari skripsi Anda)
    let sodiumNeeds: number; // Miligram
    if (age < 1) {
      sodiumNeeds = 1000; // 1 gram = 1000 mg
    } else if (age <= 3) {
      sodiumNeeds = 2000; // 2 gram
    } else if (age <= 6) {
      sodiumNeeds = 3000; // 3 gram
    } else if (age <= 10) {
      sodiumNeeds = 5000; // 5 gram
    } else {
      sodiumNeeds = 2000; // Rekomendasi umum WHO/Kemenkes untuk dewasa < 2000-2400 mg (setara 5-6g garam)
    }
    // Batas lemak jenuh (contoh dari skripsi Anda)
    const saturedFatLimitVal = gender === "male" ? 30 : 20; // Gram
    // Kebutuhan karbohidrat sekitar 45-65% dari total kalori. Kita ambil rerata 55%.
    const carbsNeeds = Math.round(((calories * 0.55) / 4)); // Gram

    setDailySodiumNeeds(sodiumNeeds);
    setDailyProteinNeeds(proteinNeeds);
    setDailyCarbsNeeds(carbsNeeds);
    setSaturedFatLimit(saturedFatLimitVal);
  };

  // Global set to track used food names across all meals
  const usedFoodNames = new Set<string>();

  // New function to get multiple food recommendations for a meal

  const getMultipleRecommendations = (
    targetCalories: number,
    mealType: "breakfast" | "lunch" | "dinner",
    excludedFoods: Set<string> = new Set(),
    count: number = 3,
    maxAttempts: number = 20
  ): Food[] => {
    // Set calorie constraints based on meal type for individual foods
    const perFoodTarget = targetCalories / count;

    let minCaloriesPerFood, maxCaloriesPerFood;
    if (mealType === "breakfast") {
      minCaloriesPerFood = perFoodTarget * 0.5;
      maxCaloriesPerFood = perFoodTarget * 1.5;
    } else if (mealType === "dinner") {
      minCaloriesPerFood = perFoodTarget * 0.6;
      maxCaloriesPerFood = perFoodTarget * 1.4;
    } else { // Lunch
      minCaloriesPerFood = perFoodTarget * 0.7;
      maxCaloriesPerFood = perFoodTarget * 1.3;
    }

    // Filter foods by calorie range and exclude already used foods
    let availableFoods = foods.filter(
      (food) =>
        food.calories >= minCaloriesPerFood &&
        food.calories <= maxCaloriesPerFood &&
        !usedFoodNames.has(food.name) &&
        !excludedFoods.has(food.name)
    );

    // If not enough foods in range, expand range
    if (availableFoods.length < count * 2) {
      console.log(`${mealType}: Not enough foods in range, expanding range`);
      availableFoods = foods.filter(
        (food) => !usedFoodNames.has(food.name) && !excludedFoods.has(food.name)
      );
    }

    // If still not enough foods, relax exclusion of foods from this meal type
    if (availableFoods.length < count) {
      console.log(`${mealType}: Not enough foods, relaxing some exclusions`);

      // Only consider foods used in other meal types as excluded
      const otherMealTypes = ["breakfast", "lunch", "dinner"].filter(
        (type) => type !== mealType
      );

      const otherMealFoods = new Set<string>();
      otherMealTypes.forEach((type) => {
        recommendedFoods[type as "breakfast" | "lunch" | "dinner"].forEach(
          (food) => otherMealFoods.add(food.name)
        );
      });

      availableFoods = foods.filter((food) => !otherMealFoods.has(food.name));
    }

    // Create target "profile" for similarity calculation
    // Distribute daily needs based on meal percentages (B:25%, L:50%, D:25%)
    const mealProteinFactor = mealType === "lunch" ? 0.5 : 0.25;
    const mealCarbsFactor = mealType === "lunch" ? 0.5 : 0.25;
    // Assuming roughly 30% calories from fat for the meal
    const mealFatCalories = targetCalories * 0.3;


    const targetProfile = {
      calories: perFoodTarget,
      protein: dailyProteinNeeds
        ? (dailyProteinNeeds * mealProteinFactor) / count
        : 20 / count, // Fallback protein
      carbs: dailyCarbsNeeds
        ? (dailyCarbsNeeds * mealCarbsFactor) / count
        : 50 / count, // Fallback carbs
      fat: mealFatCalories / 9 / count, // Convert fat calories to grams
    };


    // Calculate similarity scores
    const foodsWithScores = availableFoods.map((food) => {
      const foodVector = [food.calories, food.protein, food.carbs, food.fat];
      const targetVector = [
        targetProfile.calories,
        targetProfile.protein,
        targetProfile.carbs,
        targetProfile.fat,
      ];

      // Calculate similarity with specific focus on calories matching
      let calorieMatch =
        1 - Math.abs(food.calories - perFoodTarget) / perFoodTarget;
      calorieMatch = Math.max(0, calorieMatch); // Ensure it's not negative

      // Add penalty for exceeding target calories, especially for breakfast
      if (food.calories > perFoodTarget) {
        const overagePercent = (food.calories - perFoodTarget) / perFoodTarget;
        if (mealType === "breakfast") {
          calorieMatch -= overagePercent * 0.5; // Heavier penalty for breakfast
        } else {
          calorieMatch -= overagePercent * 0.3;
        }
      }
      calorieMatch = Math.max(0, calorieMatch); // Ensure it's not negative after penalty


      const similarityScore =
        cosineSimilarity(foodVector, targetVector) * (0.7 + 0.3 * calorieMatch);

      return { ...food, similarityScore };
    });

    // Sort by similarity score
    const sortedFoods = foodsWithScores.sort(
      (a, b) => (b.similarityScore || 0) - (a.similarityScore || 0)
    );

    const selectedFoods: Food[] = [];
    let attempts = 0;

    while (selectedFoods.length < count && attempts < maxAttempts) {
      attempts++;

      // Clear previous selection attempt
      selectedFoods.length = 0;
      const tempUsedNames = new Set<string>();

      // Try to find foods for this combination
      for (
        let i = 0;
        i < sortedFoods.length && selectedFoods.length < count;
        i++
      ) {
        const food = sortedFoods[i];
        // Only add if not already in the temporary set
        if (
          !tempUsedNames.has(food.name) &&
          !usedFoodNames.has(food.name) && // Check against globally used foods
          !excludedFoods.has(food.name)    // Check against specifically excluded for this run
        ) {
          selectedFoods.push(food);
          tempUsedNames.add(food.name);
        }
      }

      // If we don't have enough foods but are on later attempts, relax constraints
      if (selectedFoods.length < count && attempts > maxAttempts / 2) {
        for (let i = 0; i < foods.length && selectedFoods.length < count; i++) {
          const food = foods[i];
          if (
            !tempUsedNames.has(food.name) &&
            !usedFoodNames.has(food.name) &&
            food.calories >= minCaloriesPerFood &&
            food.calories <= maxCaloriesPerFood
          ) {
            selectedFoods.push(food);
            tempUsedNames.add(food.name);
          }
        }
        if (selectedFoods.length < count) {
          continue;
        }
      }

      // Check if this combination is in excluded combinations
      if (selectedFoods.length === count) {
        const foodSignature = selectedFoods
          .map((food) => food.name)
          .sort()
          .join("|");

        if (excludedCombinations[mealType].has(foodSignature)) {
          // Add the first food of this failed combination to the broader excluded set for the next attempt
          if (selectedFoods.length > 0) {
             excludedFoods.add(selectedFoods[0].name);
          }
          continue;
        }

        // Valid new combination - add to used foods
        selectedFoods.forEach((food) => usedFoodNames.add(food.name));

        // Add to all excluded foods for this meal type for future "Ganti Menu"
        selectedFoods.forEach((food) => {
          allExcludedFoods.current[mealType].add(food.name);
        });

        break;
      }
    }

    // If we couldn't find a valid combination after all attempts
    if (selectedFoods.length < count) {
      console.log(`${mealType}: Using fallback foods - all attempts exhausted`);

      // Reset excluded foods for this meal type to avoid getting stuck in future "Ganti Menu"
      allExcludedFoods.current[mealType].clear();
      excludedCombinations[mealType].clear(); // Also clear combination exclusions

      // Fallback to any available foods that meet calorie requirements
      const fallbackFoods = foods
        .filter(
          (food) =>
            !usedFoodNames.has(food.name) &&
            food.calories >= minCaloriesPerFood &&
            food.calories <= maxCaloriesPerFood
        )
        .slice(0, count);

      // If we still don't have enough, take any available foods, prioritizing calorie closeness
      if (fallbackFoods.length < count) {
        const anyFoods = foods
          .filter((food) => !usedFoodNames.has(food.name))
          .sort(
            (a, b) =>
              Math.abs(a.calories - perFoodTarget) -
              Math.abs(b.calories - perFoodTarget)
          )
          .slice(0, count - fallbackFoods.length); // Only take remaining needed

        const combinedFallback = [...fallbackFoods, ...anyFoods];
        combinedFallback.forEach((food) => usedFoodNames.add(food.name));
        return combinedFallback.slice(0, count); // Ensure we don't exceed count
      }

      fallbackFoods.forEach((food) => usedFoodNames.add(food.name));
      return fallbackFoods;
    }

    return selectedFoods;
  };

  const recommendFoods = (calorieNeeds: number) => {
    const calculateMealCalories = (totalCalories: number) => {
      const breakfastCalories = Math.round(totalCalories * 0.25);
      const lunchCalories = Math.round(totalCalories * 0.5);
      const dinnerCalories = Math.round(totalCalories * 0.25);
      return { breakfastCalories, lunchCalories, dinnerCalories };
    };

    const { breakfastCalories, lunchCalories, dinnerCalories } =
      calculateMealCalories(calorieNeeds);

    // Clear used foods when generating full recommendations
    usedFoodNames.clear();
    allExcludedFoods.current.breakfast.clear();
    allExcludedFoods.current.lunch.clear();
    allExcludedFoods.current.dinner.clear();


    // Reset excluded combinations
    setExcludedCombinations({
      breakfast: new Set(),
      lunch: new Set(),
      dinner: new Set(),
    });
     // Reset menu change counts
    setMenuChangeCount({ breakfast: 0, lunch: 0, dinner: 0 });


    // Get multiple recommendations for each meal
    const breakfast = getMultipleRecommendations(
      breakfastCalories,
      "breakfast"
    );
    const lunch = getMultipleRecommendations(lunchCalories, "lunch");
    const dinner = getMultipleRecommendations(dinnerCalories, "dinner");

    setRecommendedFoods({
      breakfast,
      lunch,
      dinner,
    });

    setBreakfastCalories(breakfastCalories);
    setLunchCalories(lunchCalories);
    setDinnerCalories(dinnerCalories);
  };

  // Function to get new recommendations for an entire meal

  const getNewMealRecommendations = (
    mealType: "breakfast" | "lunch" | "dinner"
  ) => {
    // Increment menu change count
    setMenuChangeCount((prev) => ({
      ...prev,
      [mealType]: prev[mealType] + 1,
    }));

    console.log(
      `Getting new ${mealType} menu (change #${menuChangeCount[mealType] + 1})`
    );

    // Add current recommendations to excluded foods for this meal
    const currentFoods = recommendedFoods[mealType];

    if (currentFoods && currentFoods.length > 0) {
      // Create a signature for this combination of foods
      const foodSignature = currentFoods
        .map((food) => food.name)
        .sort()
        .join("|");

      // Add to excluded combinations
      setExcludedCombinations((prev) => {
        const newExcluded = new Set(prev[mealType]);
        newExcluded.add(foodSignature);

        // Reset if we've excluded too many combinations to prevent getting stuck
        if (newExcluded.size > 15) { // Limit to 15 excluded combinations
          console.log(
            `${mealType}: Too many exclusions, resetting except current combination`
          );
          return {
            ...prev,
            [mealType]: new Set([foodSignature]), // Keep only the current
          };
        }

        return {
          ...prev,
          [mealType]: newExcluded,
        };
      });

      // Remove these foods from used foods so they can be picked again if needed for other meals
      // or if exclusions are reset
      currentFoods.forEach((food) => {
        usedFoodNames.delete(food.name);
      });
    }

    // Build a comprehensive set of foods to exclude for this specific call
    const foodsToExcludeForThisCall = new Set<string>();

    // Add foods from *other* meals (that are currently recommended)
    for (const [type, foodsInMeal] of Object.entries(recommendedFoods)) {
      if (type !== mealType) {
        foodsInMeal.forEach((food) => foodsToExcludeForThisCall.add(food.name));
      }
    }
    
    // Add foods that were part of *previously excluded combinations* for THIS meal type
    // This is to ensure we try to get truly new combinations
    excludedCombinations[mealType].forEach(comboSignature => {
        comboSignature.split('|').forEach(foodName => foodsToExcludeForThisCall.add(foodName));
    });


    // Get target calories for this meal
    let targetCalories;
    if (mealType === "breakfast") targetCalories = breakfastCalories || 0;
    else if (mealType === "lunch") targetCalories = lunchCalories || 0;
    else targetCalories = dinnerCalories || 0;

    // Dynamically adjust max attempts based on how many times we've changed the menu
    const dynamicMaxAttempts = Math.min(30, 20 + menuChangeCount[mealType]);

    // Get new recommendations for this meal
    const newRecommendations = getMultipleRecommendations(
      targetCalories,
      mealType,
      foodsToExcludeForThisCall, // Pass the set of foods to exclude for this specific attempt
      3,
      dynamicMaxAttempts
    );

    // Update recommendations state for just this meal
    setRecommendedFoods((prev) => ({
      ...prev,
      [mealType]: newRecommendations,
    }));
  };
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    setError(null);
    setSuccess(null);

    const weightNum = parseFloat(formData.weight);
    const heightNum = parseFloat(formData.height);
    const ageNum = parseInt(formData.age, 10);

    const idealWeightRange = calculateIdealWeight(heightNum);
    const calorieNeedsValue = calculateCalorieNeeds(
      weightNum,
      heightNum,
      ageNum,
      formData.gender,
      formData.activityLevel // Pass the key e.g. "sedentary"
    );
    setIdealWeight(idealWeightRange);
    setCalorieNeeds(calorieNeedsValue);

    const [minIdealWeight, maxIdealWeight] = idealWeightRange
      .split(" - ")
      .map((w) => parseFloat(w.replace(" kg", ""))); // Pastikan " kg" dihapus
    let statusMessage = "";
    let adjustedCalories = calorieNeedsValue;

    if (weightNum < minIdealWeight) {
      adjustedCalories += 500; // Penyesuaian untuk surplus
      statusMessage = `Berat badan Anda kurang dari rentang ideal (${idealWeightRange}). Untuk membantu mencapai berat ideal, disarankan untuk meningkatkan asupan kalori harian Anda menjadi sekitar ${adjustedCalories} kcal dan fokus pada makanan bergizi tinggi.`;
    } else if (weightNum > maxIdealWeight) {
      adjustedCalories -= 500; // Penyesuaian untuk defisit
      statusMessage = `Berat badan Anda berlebih dari rentang ideal (${idealWeightRange}). Untuk membantu mencapai berat ideal, disarankan untuk mengurangi asupan kalori harian menjadi sekitar ${adjustedCalories} kcal.`;
    } else {
      statusMessage = `Berat badan Anda berada dalam rentang ideal (${idealWeightRange}). Pertahankan pola makan sehat dan aktivitas fisik untuk menjaga kesehatan Anda. Kebutuhan kalori harian Anda adalah ${calorieNeedsValue} kcal.`;
    }


    setSuccess(statusMessage);

    calculateDailyNutrientNeeds(
      adjustedCalories, // Gunakan kalori yang sudah disesuaikan
      weightNum,
      ageNum,
      formData.gender
    );

    recommendFoods(adjustedCalories); // Gunakan kalori yang sudah disesuaikan

    setLoading(false);
  };

  const printTemplateRef = useRef<HTMLDivElement>(null);

  const handlePrintPDF = async () => {
    if (!printTemplateRef.current) return;

    const loadingIndicator = document.createElement("div");
    loadingIndicator.className =
      "fixed top-0 left-0 w-full h-full flex items-center justify-center bg-black/30 z-50";
    loadingIndicator.innerHTML =
      '<div class="bg-white p-4 rounded-lg">Menyiapkan PDF...</div>';
    document.body.appendChild(loadingIndicator);

    try {
      const jsPDFModule = await import("jspdf");
      const jsPDF = jsPDFModule.default;

      const template = printTemplateRef.current;
      const originalDisplay = template.style.display;
      const originalVisibility = template.style.visibility;

      // Temporarily make the element visible and position it off-screen for rendering
      template.style.display = "block";
      template.style.visibility = "visible";
      template.style.position = "absolute";
      template.style.left = "-9999px";
      template.style.top = "-9999px";


      setTimeout(() => { // Ensure DOM updates before capturing
        html2canvas(template, {
          scale: 2, // Increase scale for better quality
          useCORS: true,
          logging: false,
          allowTaint: true,
          backgroundColor: "#ffffff", // Explicit white background
           onclone: (clonedDoc) => {
            const clonedTemplate = clonedDoc.querySelector("#print-template");
            if (clonedTemplate) {
              (clonedTemplate as HTMLElement).style.display = "block";
              (clonedTemplate as HTMLElement).style.visibility = "visible";
              (clonedTemplate as HTMLElement).style.position = "static"; // Reset position for clone
            }
          },
        })
          .then((canvas) => {
            // Restore original styles
            template.style.display = originalDisplay;
            template.style.visibility = originalVisibility;
            template.style.position = "static";


            const imgData = canvas.toDataURL("image/jpeg", 0.92); // Use JPEG for potentially smaller size
            const pdf = new jsPDF({
              orientation: "portrait",
              unit: "mm",
              format: "a4",
            });

            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const margin = 10; // Margin for all sides
            const contentWidth = pdfWidth - margin * 2;
            const contentHeight = pdfHeight - margin * 2;

            const imgProps = pdf.getImageProperties(imgData);
            const imgAspectRatio = imgProps.width / imgProps.height;
            
            let finalImgWidth = contentWidth;
            let finalImgHeight = contentWidth / imgAspectRatio;

            if (finalImgHeight > contentHeight) {
                finalImgHeight = contentHeight;
                finalImgWidth = contentHeight * imgAspectRatio;
            }
            
            // Center the image
            const x = (pdfWidth - finalImgWidth) / 2;
            const y = (pdfHeight - finalImgHeight) / 2;


            pdf.addImage(imgData, "JPEG", x, y, finalImgWidth, finalImgHeight);
            pdf.save(
              `rekomendasi_makanan_sehat_${new Date().toLocaleDateString()}.pdf`
            );
            document.body.removeChild(loadingIndicator);
          })
          .catch((error) => {
            console.error("PDF generation error:", error);
             template.style.display = originalDisplay;
            template.style.visibility = originalVisibility;
            template.style.position = "static";
            document.body.removeChild(loadingIndicator);
            alert("Gagal membuat PDF. Silakan coba lagi.");
          });
      }, 300); // Increased delay
    } catch (error) {
      console.error("Error importing jsPDF:", error);
      document.body.removeChild(loadingIndicator);
      alert("Gagal memuat modul PDF. Silakan coba lagi.");
    }
  };
  const renderFoodTableRow = (food: Food, index: number) => (
    <tr key={`food-row-${food.name}-${index}-${Math.random()}`}>
      <td className="border p-2 text-gray-800">{food.name}</td>
      <td className="border p-2 text-gray-800">{food.calories} kcal</td>
      <td className="border p-2 text-gray-800">{food.protein}g</td>
      <td className="border p-2 text-gray-800">{food.carbs}g</td>
      <td className="border p-2 text-gray-800">{food.fat}g</td>
      <td className="border p-2 text-gray-800">{food.sodium}mg</td>
      <td className="border p-2 text-gray-800">{food.porpotionSize}g</td>
    </tr>
  );
  //* batas print state
  // Helper function to render a meal's food recommendations
  const renderMealCard = (
    foods: Food[],
    mealType: "breakfast" | "lunch" | "dinner"
  ) => {
    if (!foods || foods.length === 0) {
      return (
        <div className="mt-2 p-4 bg-yellow-100 text-amber-800 rounded-lg">
          <p>Tidak ada rekomendasi yang tersedia untuk saat ini.</p>
        </div>
      );
    }

    let targetCalories;
    if (mealType === "breakfast") targetCalories = breakfastCalories;
    else if (mealType === "lunch") targetCalories = lunchCalories;
    else targetCalories = dinnerCalories;

    // Calculate total calories from all foods in this meal
    const totalCalories = foods.reduce((sum, food) => sum + food.calories, 0);
    const caloriePercentage = targetCalories
      ? Math.round((totalCalories / targetCalories) * 100)
      : 0;

    let mealTitle;
    if (mealType === "breakfast") mealTitle = "Sarapan";
    else if (mealType === "lunch") mealTitle = "Makan Siang";
    else mealTitle = "Makan Malam";

    return (
      <div className="mt-2 bg-white rounded-lg p-4">
        <div className="flex justify-between items-center border-b border-[#00712D]/30 pb-2 mb-3">
          <h2 className="font-semibold text-sm lg:text-lg text-sky-500">
            Menu {mealTitle}
          </h2>
          <button
            onClick={() => getNewMealRecommendations(mealType)}
            className="bg-gradient-to-r from-sky-800 to-blue-600 text-white py-1 px-4 text-[10px] lg:text-sm rounded-full font-medium hover:bg-[#c0e47a] transition-colors"
          >
            Ganti Menu
          </button>
        </div>

        {/* Total calories progress */}

        {/* Individual food items */}
        <div className="space-y-3">
          {foods.map((food, index) => (
            <div
              key={`${food.name}-${index}-${mealType}`}
              className="p-3 bg-gradient-to-r from-sky-800 to-blue-600 rounded-lg"
            >
              <div className="font-bold mb-1 text-white">{food.name}</div>
              <div className="grid grid-cols-2 gap-2 text-sm text-white">
                <div className="bg-sky-700/50 p-2 rounded-lg">
                  <span className="font-semibold">Kalori:</span> {food.calories}{" "}
                  kcal
                </div>
                <div className="bg-sky-700/50 p-2 rounded-lg">
                  <span className="font-semibold">Protein:</span> {food.protein}{" "}
                  g
                </div>
                <div className="bg-sky-700/50 p-2 rounded-lg">
                  <span className="font-semibold">Lemak:</span> {food.fat} g
                </div>
                <div className="bg-sky-700/50 p-2 rounded-lg">
                  <span className="font-semibold">Karbohidrat:</span>{" "}
                  {food.carbs} g
                </div>
                <div className="bg-sky-700/50 p-2 rounded-lg">
                  <span className="font-semibold">Sodium:</span> {food.sodium}{" "}
                  mg
                </div>
                <div className="bg-sky-700/50 p-2 rounded-lg">
                  <span className="font-semibold">Porsi:</span>{" "}
                  {food.porpotionSize || 100}g
                </div>
              </div>
            </div>
          ))}
          <div className="mb-4">
            <div className="flex items-center justify-between mb-1 text-sky-700">
              <span className="font-semibold">Total Kalori:</span>
              <span>
                {totalCalories} kcal ({caloriePercentage}% dari target)
              </span>
            </div>
            <div className="bg-gray-200 rounded-full h-2">
              <div
                className={`h-2 rounded-full ${
                  caloriePercentage >= 90 && caloriePercentage <= 110
                    ? "bg-green-500" // Good range
                    : caloriePercentage < 90
                    ? "bg-yellow-500" // Under
                    : "bg-red-500" // Over
                }`}
                style={{ width: `${Math.min(caloriePercentage, 150)}%` }}
              ></div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <>
      <div className="md:container mx-2 md:mx-auto p-6 text-white   bg-gradient-to-tr from-blue-500 to-green-500 mt-4 rounded-xl shadow-2xl">
        <h1 className="text-2xl lg:text-3xl font-bold mb-6 text-center">Rekomendasi Makanan Sehat</h1>
        <form className="space-y-4" onSubmit={handleSubmit}>
          <div>
            <label className="block mb-1 font-medium" htmlFor="weight">
              Berat Badan (kg)
            </label>
            <input
              type="number"
              id="weight"
              name="weight"
              value={formData.weight}
              onChange={handleInputChange}
              className="text-[#0d1821] bg-white/90 focus:bg-white outline-none ring-2 ring-sky-300 focus:ring-sky-500 rounded-lg p-2.5 w-full placeholder-gray-400"
              required
              placeholder="Contoh: 60"
            />
          </div>

          <div>
            <label className="block mb-1 font-medium" htmlFor="height">
              Tinggi Badan (cm)
            </label>
            <input
              type="number"
              id="height"
              name="height"
              value={formData.height}
              onChange={handleInputChange}
              className="text-[#0d1821] bg-white/90 focus:bg-white outline-none ring-2 ring-sky-300 focus:ring-sky-500 rounded-lg p-2.5 w-full placeholder-gray-400"
              required
              placeholder="Contoh: 170"
            />
          </div>

          <div>
            <label className="block mb-1 font-medium" htmlFor="age">
              Usia (tahun)
            </label>
            <input
              type="number"
              id="age"
              name="age"
              value={formData.age}
              onChange={handleInputChange}
              className="text-[#0d1821] bg-white/90 focus:bg-white outline-none ring-2 ring-sky-300 focus:ring-sky-500 rounded-lg p-2.5 w-full placeholder-gray-400"
              required
              placeholder="Contoh: 25"
            />
          </div>

          <div>
            <label className="block mb-1 font-medium" htmlFor="gender">
              Jenis Kelamin
            </label>
            <select
              id="gender"
              name="gender"
              value={formData.gender}
              onChange={handleInputChange}
              className="text-[#0d1821] bg-white/90 focus:bg-white outline-none ring-2 ring-sky-300 focus:ring-sky-500 rounded-lg p-2.5 w-full"
            >
              <option value="male">Laki-laki</option>
              <option value="female">Perempuan</option>
            </select>
          </div>

          <div>
            <label className="block mb-1 font-medium" htmlFor="activityLevel">
              Tingkat Aktivitas Fisik
            </label>
            <select
              id="activityLevel"
              name="activityLevel"
              value={formData.activityLevel}
              onChange={handleInputChange}
              className="text-[#0d1821] bg-white/90 focus:bg-white outline-none ring-2 ring-sky-300 focus:ring-sky-500 rounded-lg p-2.5 w-full"
            >
              <option value="sedentary">Istirahat/Tidak Aktif (Sedentary)</option>
              <option value="light">
                Ringan (Olahraga ringan 1-3 hari/minggu)
              </option>
              <option value="moderate">
                Sedang (Olahraga moderat 3-5 hari/minggu)
              </option>
              <option value="active">
                Berat (Olahraga intensif 6-7 hari/minggu)
              </option>
            </select>
          </div>

          {error && (
            // Improved error message display
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative" role="alert">
                <strong className="font-bold">Oops! </strong>
                <span className="block sm:inline">{error}</span>
            </div>
          )}

          <button
            type="submit"
            className=" bg-gradient-to-r from-sky-600 to-blue-700 hover:from-sky-700 hover:to-blue-800 font-semibold w-full text-white py-3 px-4 rounded-lg transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg"
            disabled={loading}
          >
            {loading ? "Menghitung..." : "Dapatkan Rekomendasi"}
          </button>
        </form>
      </div>
      <div className="md:container mx-2 md:mx-auto mb-5 rounded-xl">
        {idealWeight && (
          <div className=" mt-6  bg-gradient-to-br from-blue-500 to-green-500 text-white rounded-xl p-6 shadow-2xl ">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4">
              <h2 className="text-xl lg:text-2xl font-semibold mb-2 sm:mb-0">
                Hasil Analisis Kesehatan Anda
              </h2>
              <button
                onClick={handlePrintPDF}
                className="bg-white text-xs lg:text-sm text-sky-600 hover:bg-sky-100 py-2 px-3 lg:px-5 rounded-lg font-medium  transition-colors flex items-center shadow hover:shadow-md"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 lg:h-5 lg:w-5 mr-2"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4-4m0 0L8 8m4-4v12"
                  />
                </svg>
                Unduh PDF
              </button>
            </div>
             {success && (
                <div className="mb-4 p-3 bg-white/20 rounded-lg text-sm">
                    <p className="font-semibold">Catatan untuk Anda:</p>
                    <p>{success}</p>
                </div>
            )}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 text-sm mb-4">
                <div className="bg-white/20 p-3 rounded-lg"><strong>Berat Badan Ideal:</strong> {idealWeight}</div>
                <div className="bg-white/20 p-3 rounded-lg"><strong>Kalori Harian:</strong> {calorieNeeds} kcal</div>
                <div className="bg-white/20 p-3 rounded-lg"><strong>Protein Harian:</strong> {dailyProteinNeeds} g</div>
                <div className="bg-white/20 p-3 rounded-lg"><strong>Karbohidrat Harian:</strong> {dailyCarbsNeeds} g</div>
                <div className="bg-white/20 p-3 rounded-lg"><strong>Batas Gula Harian:</strong> {dailySugarNeeds} g</div>
                <div className="bg-white/20 p-3 rounded-lg"><strong>Batas Sodium Harian:</strong> {dailySodiumNeeds} mg</div>
                <div className="bg-white/20 p-3 rounded-lg"><strong>Batas Lemak Jenuh:</strong> {saturedFatLimit} g</div>
            </div>

            <div className="hidden lg:block mt-6">
              <h3 className="text-xl font-semibold mb-3 text-center">
                Target Kalori per Waktu Makan:
              </h3>
              <ul className="grid lg:grid-cols-3 gap-4 text-center items-center ">
                <li className="bg-white text-sky-700 shadow-md rounded-lg py-3 px-2 font-semibold">
                  Sarapan: {breakfastCalories} kcal
                </li>
                <li className="bg-white text-sky-700 shadow-md rounded-lg py-3 px-2 font-semibold">
                  Makan Siang: {lunchCalories} kcal
                </li>
                <li className="bg-white text-sky-700 shadow-md rounded-lg py-3 px-2 font-semibold">
                  Makan Malam: {dinnerCalories} kcal
                </li>
              </ul>
            </div>
            <div className="grid lg:grid-cols-3 gap-4 mt-6">
              {/* Breakfast recommendation */}
              <div className="mt-4">
                <h3 className="lg:hidden text-xl font-semibold mb-2">
                  Rekomendasi Sarapan:
                </h3>
                {renderMealCard(recommendedFoods.breakfast, "breakfast")}
              </div>

              {/* Lunch recommendation */}
              <div className="mt-4">
                <h3 className="lg:hidden text-xl font-semibold mb-2">
                  Rekomendasi Makan Siang:
                </h3>
                {renderMealCard(recommendedFoods.lunch, "lunch")}
              </div>

              {/* Dinner recommendation */}
              <div className="mt-4">
                <h3 className="lg:hidden text-xl font-semibold mb-2">
                  Rekomendasi Makan Malam:
                </h3>
                {renderMealCard(recommendedFoods.dinner, "dinner")}
              </div>
            </div>
          </div>
        )}

        {/* Print Template (Hidden) */}
        {idealWeight && (
          <div
            id="print-template"
            ref={printTemplateRef}
            className="hidden print-visible bg-white text-gray-800 p-4" // Ensure text is visible for printing
            style={{ width: "210mm", minHeight: "297mm" }} // A4 size
          >
            <div className="container mx-auto">
              <h1 className="text-center text-xl font-bold mb-2 text-gray-900">
                REKOMENDASI MAKANAN SEHAT
              </h1>
              <p className="text-right text-xs mb-3 text-gray-700">
                Tanggal: {new Date().toLocaleDateString("id-ID", { day: '2-digit', month: 'long', year: 'numeric' })}
              </p>

              <div className="mb-4">
                <h2 className="text-lg font-semibold mb-1 border-b pb-1 text-gray-900">Informasi Kesehatan Pengguna</h2>
                <table className="w-full text-xs border-collapse">
                  <tbody>
                    <tr>
                      <td className="border p-1.5 font-medium text-gray-700">Berat Badan Ideal</td>
                      <td className="border p-1.5 text-gray-800">{idealWeight}</td>
                    </tr>
                    {success && (
                      <tr>
                        <td className="border p-1.5 font-medium text-gray-700">Catatan</td>
                        <td className="border p-1.5 text-gray-800">{success.replace(/<\/?strong>/g, '')}</td>
                      </tr>
                    )}
                    <tr>
                      <td className="border p-1.5 font-medium text-gray-700">Kebutuhan Kalori Harian</td>
                      <td className="border p-1.5 text-gray-800">{calorieNeeds} kcal</td>
                    </tr>
                    <tr>
                      <td className="border p-1.5 font-medium text-gray-700">Kebutuhan Protein Harian</td>
                      <td className="border p-1.5 text-gray-800">{dailyProteinNeeds} g</td>
                    </tr>
                     <tr>
                      <td className="border p-1.5 font-medium text-gray-700">Kebutuhan Karbohidrat Harian</td>
                      <td className="border p-1.5 text-gray-800">{dailyCarbsNeeds} g</td>
                    </tr>
                    <tr>
                      <td className="border p-1.5 font-medium text-gray-700">Batas Asupan Gula Harian</td>
                      <td className="border p-1.5 text-gray-800">{dailySugarNeeds} g</td>
                    </tr>
                    <tr>
                      <td className="border p-1.5 font-medium text-gray-700">Batas Asupan Sodium Harian</td>
                      <td className="border p-1.5 text-gray-800">{dailySodiumNeeds} mg</td>
                    </tr>
                    <tr>
                      <td className="border p-1.5 font-medium text-gray-700">Batas Asupan Lemak Jenuh</td>
                      <td className="border p-1.5 text-gray-800">{saturedFatLimit} g</td>
                    </tr>
                  </tbody>
                </table>
              </div>

              {/* Breakfast table */}
              <div className="mb-3">
                <h3 className="text-md font-semibold mb-1 border-b pb-1 text-gray-900">
                  Rekomendasi Sarapan (Target: {breakfastCalories} kcal)
                </h3>
                <table className="w-full border-collapse border text-xs">
                  <thead>
                    <tr className="bg-gray-100 text-gray-700">
                      <th className="border p-1.5">Nama Makanan</th>
                      <th className="border p-1.5">Kalori</th>
                      <th className="border p-1.5">Protein</th>
                      <th className="border p-1.5">Karbo</th>
                      <th className="border p-1.5">Lemak</th>
                      <th className="border p-1.5">Sodium</th>
                      <th className="border p-1.5">Porsi</th>
                    </tr>
                  </thead>
                  <tbody>
                    {recommendedFoods.breakfast.map((food, index) =>
                      renderFoodTableRow(food, index)
                    )}
                  </tbody>
                </table>
              </div>

              {/* Lunch table */}
              <div className="mb-3">
                <h3 className="text-md font-semibold mb-1 border-b pb-1 text-gray-900">
                  Rekomendasi Makan Siang (Target: {lunchCalories} kcal)
                </h3>
                <table className="w-full border-collapse border text-xs">
                   <thead>
                    <tr className="bg-gray-100 text-gray-700">
                      <th className="border p-1.5">Nama Makanan</th>
                      <th className="border p-1.5">Kalori</th>
                      <th className="border p-1.5">Protein</th>
                      <th className="border p-1.5">Karbo</th>
                      <th className="border p-1.5">Lemak</th>
                      <th className="border p-1.5">Sodium</th>
                      <th className="border p-1.5">Porsi</th>
                    </tr>
                  </thead>
                  <tbody>
                    {recommendedFoods.lunch.map((food, index) =>
                      renderFoodTableRow(food, index)
                    )}
                  </tbody>
                </table>
              </div>

              {/* Dinner table */}
              <div className="mb-3">
                <h3 className="text-md font-semibold mb-1 border-b pb-1 text-gray-900">
                  Rekomendasi Makan Malam (Target: {dinnerCalories} kcal)
                </h3>
                <table className="w-full border-collapse border text-xs">
                   <thead>
                    <tr className="bg-gray-100 text-gray-700">
                      <th className="border p-1.5">Nama Makanan</th>
                      <th className="border p-1.5">Kalori</th>
                      <th className="border p-1.5">Protein</th>
                      <th className="border p-1.5">Karbo</th>
                      <th className="border p-1.5">Lemak</th>
                      <th className="border p-1.5">Sodium</th>
                      <th className="border p-1.5">Porsi</th>
                    </tr>
                  </thead>
                  <tbody>
                    {recommendedFoods.dinner.map((food, index) =>
                      renderFoodTableRow(food, index)
                    )}
                  </tbody>
                </table>
              </div>

              <div className="text-center text-[8px] mt-4 pt-2 border-t text-gray-600">
                <p>
                  Rekomendasi ini dibuat berdasarkan perhitungan estimasi kebutuhan
                  kalori dan nutrisi harian Anda.
                </p>
                <p>
                  Untuk saran yang lebih personal dan akurat, silakan konsultasikan dengan ahli gizi atau tenaga kesehatan profesional.
                </p>
                 <p className="mt-2">
                  Dihasilkan oleh Sistem Rekomendasi Makanan Sehat | Kontak: farhanmaulanapangestu@gmail.com
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default FoodRecommendation;

